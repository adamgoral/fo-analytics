version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: fo-analytics-postgres
    environment:
      POSTGRES_DB: fo_analytics
      POSTGRES_USER: fo_user
      POSTGRES_PASSWORD: fo_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fo_user -d fo_analytics"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - fo-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fo-analytics-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - fo-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: fo-analytics-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: fo_user
      RABBITMQ_DEFAULT_PASS: fo_password
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - fo-network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: fo-analytics-backend
    environment:
      DATABASE_URL: postgresql+asyncpg://fo_user:fo_password@postgres:5432/fo_analytics
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://fo_user:fo_password@rabbitmq:5672/
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_USE_SSL: "false"
      PYTHONUNBUFFERED: 1
      ENVIRONMENT: development
      PYTHONPATH: /app/src
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_cache:/app/.cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: uv run uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - fo-network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: fo-analytics-frontend
    environment:
      VITE_API_URL: http://localhost:8000
      NODE_ENV: development
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev
    networks:
      - fo-network

  # MinIO (S3-compatible storage for development)
  minio:
    image: minio/minio:latest
    container_name: fo-analytics-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"   # API port
      - "9001:9001"   # Console port
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - fo-network

  # Document Processing Worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: fo-analytics-worker
    environment:
      DATABASE_URL: postgresql+asyncpg://fo_user:fo_password@postgres:5432/fo_analytics
      REDIS_URL: redis://redis:6379/0
      RABBITMQ_URL: amqp://fo_user:fo_password@rabbitmq:5672/
      MINIO_ENDPOINT: minio:9000
      PYTHONPATH: /app/src
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
    volumes:
      - ./backend:/app
      - backend_cache:/app/.cache
    command: uv run python -m worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - fo-network
    restart: unless-stopped

  backtest-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: fo-analytics-backtest-worker
    environment:
      DATABASE_URL: postgresql+asyncpg://fo_user:fo_password@postgres:5432/fo_analytics
      REDIS_URL: redis://redis:6379/0
      RABBITMQ_URL: amqp://fo_user:fo_password@rabbitmq:5672/
      PYTHONPATH: /app/src
    volumes:
      - ./backend:/app
      - backend_cache:/app/.cache
    command: uv run python -m workers.backtest_worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - fo-network
    restart: unless-stopped

  # pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: fo-analytics-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@fo-analytics.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - fo-network
    profiles:
      - tools

networks:
  fo-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  minio_data:
  backend_cache: